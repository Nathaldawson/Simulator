# Sim/events.py

class Event:
    """Base class for all events."""
    pass

class MarketTickEvent(Event):
    """Event generated when the market advances a tick."""
    def __init__(self, date, current_prices, rows):
        self.date = date
        self.current_prices = current_prices
        self.rows = rows

class SignalEvent(Event):
    """Event generated by a strategy when it produces a signal."""
    def __init__(self, symbol, signal_type, price, date):
        self.symbol = symbol
        self.signal_type = signal_type  # 'BUY' or 'SELL'
        self.price = price
        self.date = date

class OrderEvent(Event):
    """Event generated when an order is placed."""
    def __init__(self, order):
        self.order = order

class FillEvent(Event):
    """Event generated when an order is filled."""
    def __init__(self, order, fill_price, fill_quantity, commission, date):
        self.order = order
        self.fill_price = fill_price
        self.fill_quantity = fill_quantity
        self.commission = commission
        self.date = date

class PortfolioUpdateEvent(Event):
    """Event generated when the portfolio value or holdings change."""
    def __init__(self, total_value, cash, positions, current_prices, portfolio_history, benchmark_history):
        self.total_value = total_value
        self.cash = cash
        self.positions = positions
        self.current_prices = current_prices
        self.portfolio_history = portfolio_history
        self.benchmark_history = benchmark_history

class StopLossTriggeredEvent(Event):
    """Event generated when a stop-loss is triggered."""
    def __init__(self, symbol, price, date):
        self.symbol = symbol
        self.price = price
        self.date = date
